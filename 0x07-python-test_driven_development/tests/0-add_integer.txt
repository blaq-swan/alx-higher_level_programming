The 0-add_integer test module
==============================================================
This test file only contains a function called ``add_integer(a, b=98)``.


Usage
======
```add_integer(...)``` returns the addition of its arguments (2), which are a and b. The addition can only be done using the "+" operator.


Integers
========
::
		>>> add_integer = __import__('0-add_integer').add_integer
		>>> add_integer(2, -1)
		1

::
		>>> add_integer(100)
		198

::
		>>> add_integer(10, 10)
		20

::
		>>> add_integer(0, 10)
		10

::
		>>> add_integer(0, -10)
		-10

Floats
======

::
		>>> add_integer(-2.1, -1.2)
		-3

::
		>>> add_integer(4.5, -8)
		-4


Strings
========
::
		>>> add_integer("Hello", 10)
		Traceback (most recent call last):
		TypeError: a must be an integer

::
		>>> add_integer(10, "Hello")
		Traceback (most recent call last):
		TypeError: b must be an integer

::
		>>> add_integer("Hello")
		Traceback (most recent call last):
		TypeError: a must be an integer

::
		>>> add_integer(10, None)
		Traceback (most recent call last):
		TypeError: b must be an integer

::
		>>> add_integer(None)
		Traceback (most recent call last):
		TypeError: a must be an integer

::
		>>> add_integer(10, float('inf'))
		Traceback (most recent call last):
		OverflowError: cannot convert float infinity to integer

::
		>>> add_integer(10, float("NaN"))
		Traceback (most recent call last):
		ValueError: cannot convert float NaN to integer

::
		>>> add_integer()
		Traceback (most recent call last):
		TypeError: add_integer() missing 1 required positional argument: 'a'

